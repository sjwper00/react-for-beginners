{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/Detail.js","App.js","index.js"],"names":["Movie","id","coverImg","title","summary","genres","to","map","g","src","alt","Home","useState","loading","setLoading","movies","setMovies","getMovies","a","fetch","json","data","useEffect","console","log","movie","medium_cover_image","key","Detail","useParams","getMovie","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOA4BeA,MAzBf,YAAuD,IAAvCC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,OAC1C,OACA,gCACA,6BACE,cAAC,IAAD,CAAMC,GAAE,iBAAYL,GAApB,SAA2BE,MAE7B,4BAAIC,IACJ,6BACGC,EAAOE,KAAI,SAAAC,GAAC,OACX,aADiB,CACjB,eACGA,GADOA,QAId,qBAAKC,IAAOP,EAAUQ,IAAKP,QCqBhBQ,MAjCf,WACI,MAA6BC,oBAAS,GAAtC,mBAAMC,EAAN,KAAeC,EAAf,KACA,EAA2BF,mBAAS,IAApC,mBAAMG,EAAN,KAAcC,EAAd,KACMC,EAAS,uCAAG,4BAAAC,EAAA,sEAERC,MAAM,wEAFE,8BAGdC,OAHc,OACVA,EADU,OAIhBJ,EAAUI,EAAKC,KAAKN,QACpBD,GAAW,GALK,2CAAH,qDAWf,OAJAQ,qBAAU,WACRL,MACC,IACHM,QAAQC,IAAIT,GAEV,8BACGF,EAAS,4CACR,8BACGE,EAAOR,KAAI,SAAAkB,GAAK,OACf,aADqB,CACpB,EAAD,CACExB,GAAIwB,EAAMxB,GAEVC,SAAUuB,EAAMC,mBAChBvB,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAMpB,QAJToB,EAAME,aCTZC,MAdf,WACI,IAAO3B,EAAM4B,cAAN5B,GACD6B,EAAQ,uCAAG,4BAAAZ,EAAA,sEAEHC,MAAM,qDAAD,OAAsDlB,IAFxD,8BAGPmB,OAHO,OACPA,EADO,OAITG,QAAQC,IAAIJ,GAJH,2CAAH,qDASd,OAHAE,qBAAU,WACNQ,MACD,IACI,yCCsJIC,MAff,WAEE,OACC,cAAC,IAAD,UACG,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,aAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,YCzJVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8089347e.chunk.js","sourcesContent":["import PropTypes from\"prop-types\";\r\nimport {Link} from \"react-router-dom\";  //<a href> 대신 <Link to>로 대체하면서 링크로 이동시 전체 페이지 reload를 안 하게된다.\r\n\r\nfunction Movie({id, coverImg, title, summary, genres}){\r\n    return (\r\n    <div>\r\n    <h2>\r\n      <Link to={`/movie/${id}`}>{title}</Link>\r\n    </h2> \r\n    <p>{summary}</p>\r\n    <ul>\r\n      {genres.map(g => ( // 항상 key 지정하는 걸 잊지 말자!\r\n        <li key ={g}>\r\n          {g}\r\n        </li>))}\r\n    </ul>\r\n    <img src = {coverImg} alt={title}/>\r\n  </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes={\r\n    id:PropTypes.number.isRequired,\r\n    coverImg: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\nexport default Movie;","//#7.4\r\nimport { useEffect, useState } from \"react\";\r\nimport Movie from \"../components/Movie\";\r\n\r\nfunction Home(){\r\n    const[loading, setLoading] = useState(true);\r\n    const[movies, setMovies] = useState([]); //empty array\r\n    const getMovies = async() => { \r\n      const json = await(\r\n        await fetch(`https://yts.mx/api/v2/list_movies.json?minimum_rating=9&sort_by=year`) //api로 부터 받은 data를 state를 통해 data를 전달 후 보여주는 것 뿐\r\n      ).json();\r\n      setMovies(json.data.movies); //첫번째 배열 생성 이유\r\n      setLoading(false); // 두번재 배열 생성 이유\r\n      };\r\n    useEffect(()=>{\r\n      getMovies();\r\n    }, []);//this function is run only one time due to []\r\n    console.log(movies);\r\n    return(\r\n      <div>\r\n        {loading? <h1>Loading...</h1>: (\r\n          <div>\r\n            {movies.map(movie => ( //map이라는 함수를 통해 movies 배열을 가져다가 각각의 item을 movie라는 argument를 지정해 새로운 array를 만든다\r\n              <Movie\r\n                id={movie.id}\r\n                key={movie.key}\r\n                coverImg={movie.medium_cover_image}\r\n                title={movie.title}\r\n                summary={movie.summary}\r\n                genres={movie.genres}/>\r\n                ))}\r\n          </div>)\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Home;","import { useEffect } from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nfunction Detail(){\r\n    const {id} = useParams()\r\n    const getMovie = async () => {\r\n        const json =  await(\r\n            await fetch(`https://yts.mx/api/v2/movie_details.json?movie_id=${id}`)\r\n            ).json();\r\n            console.log(json);\r\n    }\r\n    useEffect(()=>{\r\n        getMovie();\r\n    }, [])\r\n    return <h1>detail</h1>;\r\n\r\n}\r\nexport default Detail;","/*\nimport Btn from \"./Btn\";\nimport styles from \"./App.module.css\";\nimport { useEffect, useState } from \"react\";\nimport Movie from \"./Movie\";\n\n#6\nfunction App() {\n  const [counter, setValue] = useState(0); //첫번째 아이템은 value이고, 두번째 아이템은 func이다.\n  const onClick = () => setValue((prev)=>prev+1);\n  const [keyword, setKeyword] = useState(\"\");\n  const onChange = (event) => setKeyword(event.target.value);\n;  \n  //console.log(\"render\");//app component가 render될때마다 실행되는 걸 알 수 있다.\n  useEffect(()=>{ //useEffect를 사용함으로써 component든 api든 한 번만 실행하고 그 뒤로 더 실행되지 않을 수 있다 \n    console.log(\"I run only once\");\n    },[]\n  );\n  useEffect(()=>{ //특정 component의 아이템이 바뀔 때만 코드가 실행\n    console.log(\"something change on counter\");\n    },[counter]\n  );\n  useEffect(()=>{ //두 개의 component 중 하나라도 아이템이 바뀔 때 코드를 실행\n    console.log(\"something change on counter & keyword\");\n    },[counter, keyword]\n  );\n  useEffect(()=>{ //특정 조건을 만족시켰을 때 코드실행\n      if(keyword !==\"\"){\n        console.log(\"search for\", {keyword}); \n      }\n    },[keyword]//이 useEffect는 [keyworkd]를 통해 keyword가 바뀔 때만 코드가 실행되게 만든다.\n  );\n  return (\n    <div>\n      <input \n        type=\"text\" \n        placeholder=\"Search here...\" \n        value = {keyword}\n        onChange={onChange}\n      />\n      <h1 className = {styles.title}>{counter}</h1>\n      <button onClick={onClick}>click me</button>\n      <Btn text=\"continue \"/> \n    </div>\n  );\n}\n*/\n/* #7.0~7.1\nfunction App(){\n    const[toDo, setToDo] = useState(\"\");\n    const[toDos, setToDos] = useState([]);\n    const onChange = (event) => setToDo(event.target.value);\n    const onSubmit = (event) => {event.preventDefault(); \n                                 if( toDo === \"\"){\n                                      return; //KILL THE FUNC\n                                 }\n                                 setToDos((currentArray) => [toDo, ...currentArray]); // '...' 뒤에 오는 배열의 element를 그대로 돌려준다                               \n                                 setToDo (\"\");\n                                };\n    console.log(toDos); \n    return(\n        <div>\n            <h1>My To Dos({toDos.length})</h1>\n            <form onSubmit = {onSubmit} //javascritp에서는 form이 submit이라는 이벤트를 갖고 있다. \n            > \n                <input \n                  onChange = {onChange}  \n                  value = {toDo}\n                  type = \"text\"\n                  placeholder = \"write your to do...\" \n                    \n                />\n                <button>Add To Do</button>\n            </form>\n            <hr/>\n            {toDos.map((item, index) => ( //map fuc은 새로운 함수를 만들어낸다\n              <li key={index}>{item}</li>\n              ))}\n        </div>\n    )\n}*/\n/* #7.2\nfunction App(){\n  const[loading, setLoading] = useState(true);\n  const [coins, setCoins] = useState([])\n  useEffect(() => {\n    fetch(\"https://api.coinpaprika.com/v1/tickers\") //코인 종류를 알려주는 api\n    .then((response) => response.json())\n    .then((json) => {\n      setCoins(json); \n      setLoading(false);\n        }\n      );\n  }, []);\n  return(\n    <div> \n      <h1>The COINS!{loading? \"\":`(${coins.length})`}</h1>\n      {loading ? <strong>Loading...</strong>: \n        <select>\n          {coins.map((coin) => \n            <option>\n              {coin.name} ({coin.symbol}):${coin.quotes.USD.price}\n            </option>)\n          }\n        </select>\n      }\n    </div>\n  );\n}\n//#7.3 \nfunction App(){\n  const[loading, setLoading] = useState(true);\n  const[movies, setMovies] = useState([]); //empty array\n  const getMovies = async() => { \n    const json = await(\n      await fetch(`https://yts.mx/api/v2/list_movies.json?minimum_rating=9&sort_by=year`) //api로 부터 받은 data를 state를 통해 data를 전달 후 보여주는 것 뿐\n    ).json();\n    setMovies(json.data.movies); //첫번째 배열 생성 이유\n    setLoading(false); // 두번재 배열 생성 이유\n    };\n  useEffect(()=>{\n    getMovies();\n  }, []);//this function is run only one time due to []\n  console.log(movies);\n  return(\n    <div>\n      {loading? <h1>Loading...</h1>: (\n        <div>\n          {movies.map(movie => ( //map이라는 함수를 통해 movies 배열을 가져다가 각각의 item을 movie라는 argument를 지정해 새로운 array를 만든다\n            <Movie\n              key={movie.key}\n              coverImg={movie.medium_cover_image}\n              title={movie.title}\n              summary={movie.summary}\n              genres={movie.genres}/>\n              ))}\n        </div>)\n      }\n    </div>\n  );\n}\n*/\n//#7.5\n\nimport{BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport Detail from \"./routes/Detail\";\n\nfunction App(){ //Route는 'localhost:3000' 뒤에 오는 걸 의미하며, path로 지정된 곳에 위치, Route, 를 찾으면 component(e.g. '<Home />')를 rendering.\n                // Switch는 Route를 찾는 기능 \n  return( \n   <Router>\n      <Switch>\n        <Route path=\"/movie/:id\">\n          <Detail />        \n        </Route>      \n        <Route path=\"/\">\n          <Home />        \n        </Route>\n      </Switch>\n    </Router>\n   );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}